import { Exploit } from "../Exploit.js";
import { Notification } from "../Notification.js";
import { DigilinoQuestion } from "./DigilinoQuestion.js";
import { InteractionContext } from "../InteractionContext.js";
import { DigilinoQuestionType } from "../Enums/DigilinoQuestionType.js";
import { DigilinoDropdown } from "./DigilinoQuestions/DigilinoDropdown.js";
import { DigilinoTextEntry } from "./DigilinoQuestions/DigilinoTextEntry.js";
import { DigilinoOpenQuestion } from "./DigilinoQuestions/DigilinoOpenQuestion.js";
import { DigilinoMultipleChoice } from "./DigilinoQuestions/DigilinoMultipleChoice.js";
import { DigilinoPracticalInteraction } from "./DigilinoQuestions/DigilinoPracticalInteraction.js";

export class DigilinoExploit extends Exploit {
    private eLearningSystem: any;
    private digilino: any;

    private handlers: Map<DigilinoQuestionType, DigilinoQuestion>;

    constructor() {
        super();

        this.handlers = new Map<DigilinoQuestionType, DigilinoQuestion>();
        this.handlers.set(DigilinoQuestionType.OpenQuestion, new DigilinoOpenQuestion());
        this.handlers.set(DigilinoQuestionType.MultipleChoice, new DigilinoMultipleChoice());
        this.handlers.set(DigilinoQuestionType.TextEntry, new DigilinoTextEntry());
        this.handlers.set(DigilinoQuestionType.Dropdown, new DigilinoDropdown());
        this.handlers.set(DigilinoQuestionType.Practical, new DigilinoPracticalInteraction());
    }

    trigger() {
        this.eLearningSystem = window["eLS"];
        this.digilino = window["Digilino"];
        let interactions = this.eLearningSystem.Navigation.currentPage.getCorregibleChildren();
        let containers = document.querySelectorAll(".pl-interactionContainer");

        let allGood = true;
        for(var i in interactions) {
            let interactionType = interactions[i].type as DigilinoQuestionType;
            let interactionHandler = this.handlers.get(interactionType);
            if(interactionHandler === undefined) {
                allGood = false;
                new Notification(`DigiSploit kent interactie van type ${interactions[i].type} niet!`, false);
                console.error("[DigiSploit] EMERGENCY DUMP", interactions[i]);
            }
            interactionHandler.revealAnswer(new InteractionContext(interactions[i], containers[i]));
        }

        if(allGood)
            new Notification(`DigiSploit heeft ${interactions.length} antwoorden ingevuld voor je.`);
    }
}